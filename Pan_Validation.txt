/**
 * ============================================================================
 * PAN_VALIDATION.GS - Setup Validator & Diagnostic Tools
 * ============================================================================
 *
 * PURPOSE:
 * Validates that all required sheets and data structures are properly
 * configured before running Cramer's V correlation analysis
 *
 * FUNCTIONS:
 * - validatePanSetup(): Full validation with detailed report
 * - isReadyForCramers(): Quick true/false readiness check
 * - generateColumnMapping(): Create detailed column mapping report
 *
 * AUTHOR: Halloween Party Analytics Team
 * LAST UPDATED: 2025-10-19
 * ============================================================================
 */


// ============================================================================
// VALIDATION REPORT - Primary Diagnostic Function
// ============================================================================

/**
 * Comprehensive validation of Pan analytics setup
 *
 * Checks:
 * 1. Form Responses (Clean) exists with required columns
 * 2. Pan_Master exists with properly encoded code_* columns
 * 3. Pan_Dict exists with correct structure
 * 4. buildVCramers() function is available
 * 5. V_Cramers output sheet status
 *
 * Displays detailed report in popup dialog
 *
 * @returns {boolean} True if all checks pass, false otherwise
 */
function validatePanSetup() {
  const ss = SpreadsheetApp.getActive();
  const report = [];
  let allGood = true;
 
  // ========== REPORT HEADER ==========
  report.push('üîç CRAMER\'S V ANALYSIS - VALIDATION REPORT');
  report.push('='.repeat(60));
  report.push(`Generated: ${new Date().toLocaleString()}`);
  report.push('');
 
  // ========== CHECK 1: SOURCE DATA ==========
  report.push('üìã STEP 1: Check Source Data');
  report.push('-'.repeat(60));
 
  const cleanSheet = ss.getSheetByName('Form Responses (Clean)');
  if (!cleanSheet) {
    report.push('‚ùå CRITICAL: "Form Responses (Clean)" sheet not found!');
    report.push('   ‚Üí This is the required source for Pan_Master');
    allGood = false;
  } else {
    const rowCount = cleanSheet.getLastRow() - 1; // Exclude header
    report.push(`‚úÖ Form Responses (Clean) found: ${rowCount} guests`);
   
    // Verify required categorical columns exist
    const cleanData = cleanSheet.getDataRange().getValues();
    if (cleanData.length < 2) {
      report.push('‚ö†Ô∏è  Sheet exists but has no data rows');
      allGood = false;
    } else {
      const cleanHeaders = cleanData[0];
     
      // List of key categorical columns needed for analysis
      const requiredCols = [
        'Screen Name',
        'UID',
        'Zodiac Sign',
        'Age Range',
        'Education Level',
        'Self Identified Ethnicity',
        'Self-Identified Gender',
        'Self-Identified Sexual Orientation',
        'Employment Information (Industry)',
        'Employment Information (Role)',
        'Music Preference',
        'At your worst you are‚Ä¶'
      ];
     
      const missingCols = requiredCols.filter(col =>
        !cleanHeaders.some(h => String(h).trim() === col)
      );
     
      if (missingCols.length > 0) {
        report.push(`‚ö†Ô∏è  Missing ${missingCols.length} required columns:`);
        missingCols.forEach(col => report.push(`   - ${col}`));
        allGood = false;
      } else {
        report.push(`‚úÖ All ${requiredCols.length} key categorical columns present`);
      }
    }
  }
  report.push('');
 
  // ========== CHECK 2: PAN_MASTER ==========
  report.push('üìä STEP 2: Check Pan_Master (Analysis Dataset)');
  report.push('-'.repeat(60));
 
  const panMaster = ss.getSheetByName('Pan_Master');
  if (!panMaster) {
    report.push('‚ùå Pan_Master not found');
    report.push('   ‚Üí Run "Build Pan Sheets" from Analytics menu');
    allGood = false;
  } else {
    const masterData = panMaster.getDataRange().getValues();
    if (masterData.length < 2) {
      report.push('‚ö†Ô∏è  Pan_Master exists but is empty');
      report.push('   ‚Üí Run "Build Pan Sheets" to populate it');
      allGood = false;
    } else {
      const masterHeaders = masterData[0];
      const codeColumns = masterHeaders.filter(h => String(h).startsWith('code_'));
      const ohColumns = masterHeaders.filter(h => String(h).startsWith('oh_'));
      const hasColumns = masterHeaders.filter(h => String(h).startsWith('has_'));
      const rowCount = masterData.length - 1;
     
      if (codeColumns.length === 0) {
        report.push('‚ùå No code_* columns found in Pan_Master!');
        report.push('   ‚Üí These are required for Cramer\'s V analysis');
        allGood = false;
      } else {
        report.push(`‚úÖ Pan_Master found: ${rowCount} guests, ${masterHeaders.length} columns`);
        report.push(`   - ${codeColumns.length} categorical variables (code_*)`);
        report.push(`   - ${ohColumns.length} one-hot columns (oh_*)`);
        report.push(`   - ${hasColumns.length} presence flags (has_*)`);
        report.push('');
        report.push(`   Categorical variables for correlation:`);
        // List first 10 variables to avoid cluttering report
        const varNames = codeColumns.slice(0, 10).map(c => c.replace('code_', ''));
        report.push(`   ${varNames.join(', ')}${codeColumns.length > 10 ? '...' : ''}`);
      }
    }
  }
  report.push('');
 
  // ========== CHECK 3: PAN_DICT ==========
  report.push('üìö STEP 3: Check Pan_Dict (Data Dictionary)');
  report.push('-'.repeat(60));
 
  const panDict = ss.getSheetByName('Pan_Dict');
  if (!panDict) {
    report.push('‚ùå Pan_Dict not found');
    report.push('   ‚Üí Run "Build Pan Sheets" from Analytics menu');
    allGood = false;
  } else {
    const dictData = panDict.getDataRange().getValues();
    if (dictData.length < 2) {
      report.push('‚ö†Ô∏è  Pan_Dict exists but is empty');
      allGood = false;
    } else {
      const dictHeaders = dictData[0];
      const requiredDictCols = ['Key', 'Header', 'Type', 'Option', 'Code'];
      const hasDictCols = requiredDictCols.every(col =>
        dictHeaders.some(h => String(h).trim() === col)
      );
     
      if (!hasDictCols) {
        report.push('‚ùå Pan_Dict missing required columns!');
        report.push(`   Required: ${requiredDictCols.join(', ')}`);
        allGood = false;
      } else {
        const singleTypes = dictData.slice(1).filter(row => row[2] === 'single');
        const multiTypes = dictData.slice(1).filter(row => row[2] === 'multi');
        const uniqueVars = new Set(singleTypes.map(row => row[0]));
       
        report.push(`‚úÖ Pan_Dict found: ${dictData.length - 1} total rows`);
        report.push(`   - ${uniqueVars.size} single-choice variables`);
        report.push(`   - ${multiTypes.length > 0 ? 'Yes' : 'No'} multi-select variables`);
        report.push(`   - Structure: Key | Header | Type | Option | Code | Note`);
      }
    }
  }
  report.push('');
 
  // ========== CHECK 4: V_CRAMERS FUNCTION ==========
  report.push('üîß STEP 4: Check V_Cramers Function');
  report.push('-'.repeat(60));
 
  if (typeof buildVCramers === 'function') {
    report.push('‚úÖ buildVCramers() function is available');
    report.push('   ‚Üí Ready to generate correlation matrix');
  } else {
    report.push('‚ùå buildVCramers() function not found!');
    report.push('   ‚Üí Add V_Cramers.gs script file to your project');
    report.push('   ‚Üí File should contain buildVCramers() function');
    allGood = false;
  }
  report.push('');
 
  // ========== CHECK 5: EXISTING OUTPUT ==========
  report.push('üìà STEP 5: Check Existing Output');
  report.push('-'.repeat(60));
 
  const vCramers = ss.getSheetByName('V_Cramers');
  if (vCramers) {
    const vData = vCramers.getDataRange().getValues();
    if (vData.length > 1) {
      const varCount = vData.length - 1; // Exclude header
      const lastModified = vCramers.getLastUpdated ?
        vCramers.getLastUpdated().toLocaleString() : 'Unknown';
     
      report.push(`‚úÖ V_Cramers sheet exists with ${varCount} √ó ${varCount} matrix`);
      report.push(`   ‚Üí Contains correlation data`);
      report.push(`   ‚Üí Can be rebuilt anytime using "Build V_Cramers Matrix"`);
    } else {
      report.push('‚ö†Ô∏è  V_Cramers sheet exists but is empty');
      report.push('   ‚Üí Run "Build V_Cramers Matrix" to generate');
    }
  } else {
    report.push('‚ÑπÔ∏è  V_Cramers sheet not yet created');
    report.push('   ‚Üí Will be created automatically on first run');
  }
  report.push('');
 
  // ========== FINAL SUMMARY ==========
  report.push('='.repeat(60));
  report.push('');
 
  if (allGood) {
    report.push('‚úÖ ALL CHECKS PASSED! ');
    report.push('');
    report.push('Your setup is ready for Cramer\'s V correlation analysis.');
    report.push('');
    report.push('üöÄ NEXT STEPS:');
    report.push('   1. If data changed: Analytics ‚Üí Build Pan Sheets');
    report.push('   2. To generate correlations: Analytics ‚Üí Build V_Cramers Matrix');
    report.push('   3. View results in the V_Cramers sheet');
    report.push('');
    report.push('üí° TIP: The correlation matrix shows associations between all');
    report.push('   categorical traits (0.0 = no association, 1.0 = perfect)');
  } else {
    report.push('‚ùå VALIDATION FAILED');
    report.push('');
    report.push('Please fix the issues above before running analysis.');
    report.push('');
    report.push('üîß COMMON FIXES:');
    report.push('   ‚Ä¢ Missing Pan sheets? ‚Üí Analytics ‚Üí Build Pan Sheets');
    report.push('   ‚Ä¢ Missing V_Cramers.gs? ‚Üí Add the script file (see doc)');
    report.push('   ‚Ä¢ Missing source data? ‚Üí Check "Form Responses (Clean)"');
    report.push('   ‚Ä¢ Need help? ‚Üí Review Master_Desc sheet for structure');
  }
 
  // ========== DISPLAY REPORT ==========
  const ui = SpreadsheetApp.getUi();
  const title = allGood ? '‚úÖ Validation Passed' : '‚ùå Validation Failed';
  ui.alert(title, report.join('\n'), ui.ButtonSet.OK);
 
  // Also log to console for debugging
  Logger.log('=== VALIDATION REPORT ===');
  Logger.log(report.join('\n'));
 
  return allGood;
}


// ============================================================================
// QUICK READINESS CHECK - For Programmatic Use
// ============================================================================

/**
 * Quick validation check without UI popup
 * Useful for automated workflows or pre-flight checks
 *
 * @returns {boolean} True if ready for Cramer's V analysis
 */
function isReadyForCramers() {
  const ss = SpreadsheetApp.getActive();
 
  // Check all required sheets exist
  const hasClean = !!ss.getSheetByName('Form Responses (Clean)');
  const hasMaster = !!ss.getSheetByName('Pan_Master');
  const hasDict = !!ss.getSheetByName('Pan_Dict');
  const hasFunction = typeof buildVCramers === 'function';
 
  if (!hasMaster || !hasDict || !hasFunction) {
    return false;
  }
 
  // Verify Pan_Master has categorical code columns
  const master = ss.getSheetByName('Pan_Master');
  const masterData = master.getDataRange().getValues();
  if (masterData.length < 2) return false; // No data
 
  const headers = masterData[0];
  const codeCount = headers.filter(h => String(h).startsWith('code_')).length;
 
  return hasClean && codeCount > 0;
}


// ============================================================================
// COLUMN MAPPING REPORT - Detailed Traceability
// ============================================================================

/**
 * Generate detailed mapping of source columns to Pan_Master columns
 *
 * Creates new sheet "Column_Mapping" showing:
 * - Each column in Form Responses (Clean)
 * - Corresponding column(s) in Pan_Master
 * - Transformation type (ID, Categorical, Multi-select, etc.)
 *
 * Useful for:
 * - Understanding data transformations
 * - Debugging encoding issues
 * - Documentation for stakeholders
 */
function generateColumnMapping() {
  const ss = SpreadsheetApp.getActive();
  const clean = ss.getSheetByName('Form Responses (Clean)');
  const master = ss.getSheetByName('Pan_Master');
 
  // Validate prerequisite sheets exist
  if (!clean) {
    SpreadsheetApp.getUi().alert(
      'Error',
      '"Form Responses (Clean)" sheet not found.\n\n' +
      'Please ensure this sheet exists before generating mapping.',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    return;
  }
 
  if (!master) {
    SpreadsheetApp.getUi().alert(
      'Error',
      '"Pan_Master" sheet not found.\n\n' +
      'Run "Build Pan Sheets" first to create Pan_Master.',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    return;
  }
 
  // Load headers
  const cleanHeaders = clean.getDataRange().getValues()[0];
  const masterHeaders = master.getDataRange().getValues()[0];
 
  // Build mapping report
  const report = [['Source Column (Clean)', 'Pan_Master Column(s)', 'Transformation Type', 'Notes']];
 
  cleanHeaders.forEach((cleanCol, i) => {
    const cleanName = String(cleanCol).trim();
    if (!cleanName) return; // Skip empty columns
   
    let masterCol = '';
    let colType = '';
    let notes = '';
   
    // Determine mapping based on column name and type
    if (cleanName === 'Screen Name' || cleanName === 'UID') {
      masterCol = cleanName;
      colType = 'Identity';
      notes = 'Copied as-is';
     
    } else if (cleanName === 'Timestamp') {
      masterCol = 'TimestampMs';
      colType = 'Temporal';
      notes = 'Converted to epoch milliseconds';
     
    } else if (cleanName === 'Birthday (MM/DD)') {
      masterCol = 'Birthday_MM/DD';
      colType = 'Temporal';
      notes = 'Formatted as MM/DD string';
     
    } else if (cleanName === 'Current 5 Digit Zip Code') {
      masterCol = 'Zip';
      colType = 'Text (raw)';
      notes = 'Preserved as text';
     
    } else if (cleanName === 'Checked-In at Event' || cleanName === 'Check-In Timestamp') {
      masterCol = '(not included)';
      colType = 'Filter';
      notes = 'Used for filtering only';
     
    } else if (cleanName === 'Photo URL') {
      masterCol = '(not included)';
      colType = 'Excluded';
      notes = 'Not needed for analysis';
     
    } else {
      // Try to find corresponding code_ column
      const normalized = cleanName.toLowerCase().replace(/[^a-z0-9]/g, '');
      const codeCol = masterHeaders.find(h => {
        const hNorm = String(h).replace('code_', '').toLowerCase().replace(/[^a-z0-9]/g, '');
        return hNorm === normalized;
      });
     
      if (codeCol) {
        masterCol = codeCol;
        colType = 'Categorical (coded)';
        notes = 'Options mapped to numeric codes (1, 2, 3...)';
      } else {
        // Check for multi-select (oh_* columns)
        const ohMatches = masterHeaders.filter(h =>
          String(h).startsWith('oh_') &&
          normalized.includes(String(h).split('_')[1].toLowerCase())
        );
       
        if (ohMatches.length > 0) {
          masterCol = `${ohMatches.length} columns (oh_*)`;
          colType = 'Multi-select (one-hot)';
          notes = 'One binary column per option (0/1)';
        } else {
          // Check for text presence flag
          const hasCol = masterHeaders.find(h =>
            String(h).startsWith('has_') &&
            normalized.includes(String(h).replace('has_', '').toLowerCase())
          );
         
          if (hasCol) {
            masterCol = hasCol;
            colType = 'Text (presence flag)';
            notes = '1 if text present, 0 if empty';
          } else {
            masterCol = '(not found)';
            colType = 'Unknown';
            notes = 'May not be in SPEC';
          }
        }
      }
    }
   
    report.push([cleanName, masterCol, colType, notes]);
  });
 
  // Write to new sheet
  let mapSheet = ss.getSheetByName('Column_Mapping');
  if (!mapSheet) {
    mapSheet = ss.insertSheet('Column_Mapping');
  }
  mapSheet.clear();
 
  // Write data
  mapSheet.getRange(1, 1, report.length, 4).setValues(report);
 
  // Format header row
  const headerRange = mapSheet.getRange(1, 1, 1, 4);
  headerRange
    .setBackground('#434343')
    .setFontColor('#ffffff')
    .setFontWeight('bold')
    .setHorizontalAlignment('center');
 
  // Auto-resize columns
  mapSheet.autoResizeColumns(1, 4);
 
  // Set reasonable column widths
  mapSheet.setColumnWidth(1, 280); // Source Column
  mapSheet.setColumnWidth(2, 280); // Pan_Master Column
  mapSheet.setColumnWidth(3, 180); // Type
  mapSheet.setColumnWidth(4, 320); // Notes
 
  // Freeze header
  mapSheet.setFrozenRows(1);
 
  // Add alternating row colors
  if (report.length > 1) {
    for (let row = 2; row <= report.length; row++) {
      if (row % 2 === 0) {
        mapSheet.getRange(row, 1, 1, 4).setBackground('#f3f3f3');
      }
    }
  }
 
  // Success message
  SpreadsheetApp.getUi().alert(
    '‚úÖ Column Mapping Generated!',
    `Created "Column_Mapping" sheet with ${report.length - 1} source columns.\n\n` +
    'This shows how each column in "Form Responses (Clean)" is\n' +
    'transformed into Pan_Master for analysis.',
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}


// ============================================================================
// REFRESH ALL ANALYTICS - One-Click Update
// ============================================================================

/**
 * Rebuild all analytics sheets in sequence
 * Useful after updating source data
 *
 * Process:
 * 1. Rebuild Pan_Master and Pan_Dict from Form Responses (Clean)
 * 2. Rebuild V_Cramers correlation matrix
 * 3. Regenerate Master_Desc documentation
 */
function refreshAllAnalytics() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActive();
 
  // Confirmation dialog
  const response = ui.alert(
    'Refresh All Analytics',
    'This will rebuild:\n' +
    '‚Ä¢ Pan_Master & Pan_Dict\n' +
    '‚Ä¢ V_Cramers correlation matrix\n' +
    '‚Ä¢ Master_Desc documentation\n\n' +
    'This may take a few moments. Continue?',
    ui.ButtonSet.YES_NO
  );
 
  if (response !== ui.Button.YES) return;
 
  try {
    // Step 1: Build Pan sheets
    if (typeof buildPanSheets === 'function') {
      ss.toast('Building Pan_Master and Pan_Dict...', '‚è≥ Progress', 5);
      buildPanSheets();
      ss.toast('‚úì Pan sheets rebuilt', 'Progress', 2);
      Utilities.sleep(1000); // Brief pause
    }
   
    // Step 2: Build V_Cramers
    if (typeof buildVCramers === 'function') {
      ss.toast('Computing Cramer\'s V correlations...', '‚è≥ Progress', 5);
      buildVCramers();
      ss.toast('‚úì V_Cramers matrix rebuilt', 'Progress', 2);
      Utilities.sleep(1000);
    }
   
    // Step 3: Regenerate Master_Desc
    if (typeof generateMasterDesc === 'function') {
      ss.toast('Updating documentation...', '‚è≥ Progress', 5);
      generateMasterDesc();
      ss.toast('‚úì Master_Desc updated', 'Progress', 2);
    }
   
    // Success!
    ui.alert(
      '‚úÖ All Analytics Refreshed!',
      'Successfully updated:\n' +
      '‚úì Pan_Master & Pan_Dict\n' +
      '‚úì V_Cramers correlation matrix\n' +
      '‚úì Master_Desc documentation\n\n' +
      'All sheets are now up to date with the latest data.',
      ui.ButtonSet.OK
    );
   
  } catch (e) {
    // Error handling
    Logger.log('Error in refreshAllAnalytics: ' + e.toString());
    ui.alert(
      '‚ùå Error',
      'An error occurred while refreshing analytics:\n\n' +
      e.toString() + '\n\n' +
      'Check the script logs (View ‚Üí Logs) for details.',
      ui.ButtonSet.OK
    );
  }
}


// ============================================================================
// END OF PAN_VALIDATION.GS
// ============================================================================

