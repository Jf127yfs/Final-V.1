/**
 * ============================================================================
 * REPORTS.GS - ALL PARTY SURVEY ANALYSIS REPORTS
 * ============================================================================
 *
 * Contains all report generation functions for party survey analysis.
 * Each function creates a formatted output sheet with analysis results.
 *
 * AVAILABLE REPORTS:
 * 1. buildDemographicsSummary() - Age, gender, ethnicity, education breakdown
 * 2. buildMusicInterestsReport() - Music preferences and general interests
 * 3. buildHostRelationshipReport() - Guest relationships with party hosts
 * 4. buildAttendeeAnalysis() - Compare attendees vs no-shows
 * 5. buildGuestProfiles() - Individual guest profile cards
 *
 * USAGE:
 * Run any function from the script editor or create a custom menu
 */

// ============================================================================
// GLOBAL CONFIGURATION
// ============================================================================


// ============================================================================
// REPORT 1: DEMOGRAPHICS SUMMARY
// ============================================================================

/**
 * Generate comprehensive demographic overview
 * Shows distributions across age, gender, ethnicity, education, employment
 * Output: Demographics_Summary sheet
 */
function buildDemographicsSummary() {
  const ss = SpreadsheetApp.getActive();
  const cleanSheet = ss.getSheetByName(REPORTS_CLEAN_SHEET);
 
  if (!cleanSheet) {
    throw new Error(`Sheet &quot;${REPORTS_CLEAN_SHEET}&quot; not found.`);
  }

  const data = cleanSheet.getDataRange().getValues();
  if (data.length &lt; 2) {
    writeSheet_('Demographics_Summary', [['No data available']]);
    return;
  }

  const header = data[0];
  const colIdx = getColumnMap_(header);

  // Calculate overview metrics
  const totalCount = data.length - 1;
  const checkedInCount = data.slice(1).filter(row =&gt;
    String(row[colIdx['Checked-In at Event']] || '').trim().toUpperCase() === 'Y'
  ).length;

  // Build report sections
  const sections = [];

  // Title and overview
  sections.push(['PARTY SURVEY DEMOGRAPHICS SUMMARY']);
  sections.push(['']);
  sections.push(['Metric', 'Count', 'Percentage']);
  sections.push(['Total Responses', totalCount, '100.0%']);
  sections.push(['Checked-In Attendees', checkedInCount, ((checkedInCount / totalCount) * 100).toFixed(1) + '%']);
  sections.push(['No-Shows', totalCount - checkedInCount, (((totalCount - checkedInCount) / totalCount) * 100).toFixed(1) + '%']);
  sections.push(['']);

  // Add distribution sections
  const demographicFields = [
    ['Age Range', 'AGE RANGE DISTRIBUTION'],
    ['Self-Identified Gender', 'GENDER DISTRIBUTION'],
    ['Self Identified Ethnicity', 'ETHNICITY DISTRIBUTION'],
    ['Education Level', 'EDUCATION LEVEL DISTRIBUTION'],
    ['Self-Identified Sexual Orientation', 'SEXUAL ORIENTATION DISTRIBUTION'],
    ['Employment Information (Industry)', 'INDUSTRY DISTRIBUTION'],
    ['Employment Information (Role)', 'ROLE DISTRIBUTION']
  ];

  demographicFields.forEach(([colName, title]) =&gt; {
    sections.push(...buildDistribution_(data, colIdx, colName, title, 'Checked-In at Event'));
    sections.push(['']);
  });

  writeSheet_('Demographics_Summary', sections);
  formatDemographicsSheet_();
}

/**
 * Build distribution table for a demographic variable
 */
function buildDistribution_(data, colIdx, colName, title, checkedInCol) {
  const dataColIdx = colIdx[colName];
  const checkedInIdx = colIdx[checkedInCol];
 
  if (dataColIdx === undefined) {
    return [[title], ['Column not found']];
  }

  const totalCounts = {};
  const checkedInCounts = {};

  for (let i = 1; i &lt; data.length; i++) {
    const value = String(data[i][dataColIdx] || '').trim();
    const isCheckedIn = String(data[i][checkedInIdx] || '').trim().toUpperCase() === 'Y';

    if (!value) continue;

    totalCounts[value] = (totalCounts[value] || 0) + 1;
    if (isCheckedIn) {
      checkedInCounts[value] = (checkedInCounts[value] || 0) + 1;
    }
  }

  const sortedValues = Object.keys(totalCounts).sort((a, b) =&gt; totalCounts[b] - totalCounts[a]);
  const totalSum = Object.values(totalCounts).reduce((a, b) =&gt; a + b, 0);
  const checkedInSum = Object.values(checkedInCounts).reduce((a, b) =&gt; a + b, 0);

  const rows = [
    [title],
    ['Category', 'Total', '% of Total', 'Checked-In', '% of Checked-In']
  ];

  sortedValues.forEach(value =&gt; {
    const totalCount = totalCounts[value];
    const checkedInCount = checkedInCounts[value] || 0;
    const totalPct = ((totalCount / totalSum) * 100).toFixed(1);
    const checkedInPct = checkedInSum &gt; 0 ? ((checkedInCount / checkedInSum) * 100).toFixed(1) : '0.0';

    rows.push([value, totalCount, `${totalPct}%`, checkedInCount, `${checkedInPct}%`]);
  });

  rows.push(['TOTAL', totalSum, '100.0%', checkedInSum, '100.0%']);

  return rows;
}

function formatDemographicsSheet_() {
  const sheet = SpreadsheetApp.getActive().getSheetByName('Demographics_Summary');
  if (!sheet) return;

  const data = sheet.getDataRange().getValues();
 
  for (let row = 1; row &lt;= data.length; row++) {
    const cellValue = String(data[row - 1][0] || '').trim();
   
    if (cellValue === 'PARTY SURVEY DEMOGRAPHICS SUMMARY') {
      sheet.getRange(row, 1, 1, 5).setFontWeight('bold').setFontSize(12)
        .setBackground('#1c4587').setFontColor('#ffffff');
    } else if (cellValue.toUpperCase() === cellValue &amp;&amp; cellValue.includes('DISTRIBUTION')) {
      sheet.getRange(row, 1, 1, 5).setFontWeight('bold').setFontSize(11)
        .setBackground('#4a86e8').setFontColor('#ffffff');
    } else if (cellValue === 'Category' || cellValue === 'Metric') {
      sheet.getRange(row, 1, 1, 5).setFontWeight('bold').setBackground('#d9d9d9');
    } else if (cellValue === 'TOTAL') {
      sheet.getRange(row, 1, 1, 5).setFontWeight('bold').setBackground('#f3f3f3');
    }
  }

  for (let col = 1; col &lt;= 5; col++) {
    sheet.autoResizeColumn(col);
  }
}

// ============================================================================
// REPORT 2: MUSIC &amp; INTERESTS
// ============================================================================

/**
 * Analyze music preferences and general interests
 * Output: Music_Interests_Report sheet
 */
function buildMusicInterestsReport() {
  const ss = SpreadsheetApp.getActive();
  const cleanSheet = ss.getSheetByName(REPORTS_CLEAN_SHEET);
 
  if (!cleanSheet) {
    throw new Error(`Sheet &quot;${REPORTS_CLEAN_SHEET}&quot; not found.`);
  }

  const data = cleanSheet.getDataRange().getValues();
  if (data.length &lt; 2) {
    writeSheet_('Music_Interests_Report', [['No data available']]);
    return;
  }

  const header = data[0];
  const colIdx = getColumnMap_(header);

  const sections = [];

  // Title
  sections.push(['MUSIC &amp; INTERESTS ANALYSIS']);
  sections.push(['']);

  // Music Preferences
  sections.push(...buildMusicPreferences_(data, colIdx));
  sections.push(['']);

  // Top Artists
  sections.push(...buildTopArtists_(data, colIdx, 15));
  sections.push(['']);

  // Top Interests
  sections.push(...buildTopInterests_(data, colIdx));
  sections.push(['']);

  // Music by Age
  sections.push(...buildMusicByDemographic_(data, colIdx, 'Age Range', 'AGE GROUP'));
  sections.push(['']);

  // Music by Gender
  sections.push(...buildMusicByDemographic_(data, colIdx, 'Self-Identified Gender', 'GENDER'));
  sections.push(['']);

  // Song Requests
  sections.push(...buildSongRequestsSummary_(data, colIdx));

  writeSheet_('Music_Interests_Report', sections);
  formatGenericReport_('Music_Interests_Report');
}

function buildMusicPreferences_(data, colIdx) {
  const col = colIdx['Music Preference'];
  if (col === undefined) return [['MUSIC PREFERENCE DISTRIBUTION'], ['Column not found']];

  const counts = {};
  let total = 0;

  for (let i = 1; i &lt; data.length; i++) {
    const value = String(data[i][col] || '').trim();
    if (!value) continue;
    counts[value] = (counts[value] || 0) + 1;
    total++;
  }

  const sorted = Object.entries(counts).sort((a, b) =&gt; b[1] - a[1]);
  const rows = [['MUSIC PREFERENCE DISTRIBUTION'], ['Genre', 'Count', 'Percentage']];

  sorted.forEach(([genre, count]) =&gt; {
    rows.push([genre, count, `${((count / total) * 100).toFixed(1)}%`]);
  });

  rows.push(['TOTAL', total, '100.0%']);
  return rows;
}

function buildTopArtists_(data, colIdx, limit) {
  const col = colIdx['Current Favorite Artist'];
  if (col === undefined) return [[`TOP ${limit} FAVORITE ARTISTS`], ['Column not found']];

  const counts = {};
  for (let i = 1; i &lt; data.length; i++) {
    const value = String(data[i][col] || '').trim();
    if (!value) continue;
    counts[value] = (counts[value] || 0) + 1;
  }

  const sorted = Object.entries(counts).sort((a, b) =&gt; b[1] - a[1]).slice(0, limit);
  const rows = [[`TOP ${limit} FAVORITE ARTISTS`], ['Rank', 'Artist', 'Mentions']];

  sorted.forEach(([artist, count], idx) =&gt; {
    rows.push([idx + 1, artist, count]);
  });

  return rows;
}

function buildTopInterests_(data, colIdx) {
  const col = colIdx['Your General Interests (Choose 3)'];
  if (col === undefined) return [['TOP INTERESTS'], ['Column not found']];

  const counts = {};
  let totalResponses = 0;

  for (let i = 1; i &lt; data.length; i++) {
    const value = String(data[i][col] || '').trim();
    if (!value) continue;
    totalResponses++;

    const interests = value.split(',').map(s =&gt; s.trim()).filter(s =&gt; s);
    interests.forEach(interest =&gt; {
      counts[interest] = (counts[interest] || 0) + 1;
    });
  }

  const sorted = Object.entries(counts).sort((a, b) =&gt; b[1] - a[1]);
  const rows = [['TOP INTERESTS'], ['Interest', 'Count', '% of Guests']];

  sorted.forEach(([interest, count]) =&gt; {
    rows.push([interest, count, `${((count / totalResponses) * 100).toFixed(1)}%`]);
  });

  return rows;
}

function buildMusicByDemographic_(data, colIdx, demoCol, demoLabel) {
  const musicCol = colIdx['Music Preference'];
  const demoColIdx = colIdx[demoCol];
 
  if (musicCol === undefined || demoColIdx === undefined) {
    return [[`MUSIC PREFERENCE BY ${demoLabel}`], ['Required columns not found']];
  }

  const crosstab = {};
  for (let i = 1; i &lt; data.length; i++) {
    const demo = String(data[i][demoColIdx] || '').trim();
    const music = String(data[i][musicCol] || '').trim();
    if (!demo || !music) continue;

    if (!crosstab[demo]) crosstab[demo] = {};
    crosstab[demo][music] = (crosstab[demo][music] || 0) + 1;
  }

  const allGenres = new Set();
  Object.values(crosstab).forEach(musicCounts =&gt; {
    Object.keys(musicCounts).forEach(genre =&gt; allGenres.add(genre));
  });
  const genres = Array.from(allGenres).sort();
  const demos = Object.keys(crosstab).sort();

  const rows = [[`MUSIC PREFERENCE BY ${demoLabel}`], [demoCol, ...genres, 'Total']];

  demos.forEach(demo =&gt; {
    const row = [demo];
    let rowTotal = 0;
    genres.forEach(genre =&gt; {
      const count = crosstab[demo][genre] || 0;
      row.push(count);
      rowTotal += count;
    });
    row.push(rowTotal);
    rows.push(row);
  });

  return rows;
}

function buildSongRequestsSummary_(data, colIdx) {
  const col = colIdx['Name one song you want to hear at the party.'];
  if (col === undefined) return [['SONG REQUESTS SUMMARY'], ['Column not found']];

  let totalResponses = 0, withSong = 0, withoutSong = 0;

  for (let i = 1; i &lt; data.length; i++) {
    totalResponses++;
    const value = String(data[i][col] || '').trim();
    if (value) withSong++; else withoutSong++;
  }

  const withPct = ((withSong / totalResponses) * 100).toFixed(1);
  const withoutPct = ((withoutSong / totalResponses) * 100).toFixed(1);

  return [
    ['SONG REQUESTS SUMMARY'],
    ['Category', 'Count', 'Percentage'],
    ['Provided Song Request', withSong, `${withPct}%`],
    ['No Song Request', withoutSong, `${withoutPct}%`],
    ['Total Responses', totalResponses, '100.0%']
  ];
}

// ============================================================================
// REPORT 3: HOST RELATIONSHIPS
// ============================================================================

/**
 * Analyze guest relationships with party hosts
 * Output: Host_Relationships sheet
 */
function buildHostRelationshipReport() {
  const ss = SpreadsheetApp.getActive();
  const cleanSheet = ss.getSheetByName(REPORTS_CLEAN_SHEET);
 
  if (!cleanSheet) {
    throw new Error(`Sheet &quot;${REPORTS_CLEAN_SHEET}&quot; not found.`);
  }

  const data = cleanSheet.getDataRange().getValues();
  if (data.length &lt; 2) {
    writeSheet_('Host_Relationships', [['No data available']]);
    return;
  }

  const header = data[0];
  const colIdx = getColumnMap_(header);

  const sections = [];

  sections.push(['HOST RELATIONSHIP ANALYSIS']);
  sections.push(['']);

  // Overview
  sections.push(...buildHostOverview_(data, colIdx));
  sections.push(['']);

  // Duration Distribution
  sections.push(...buildHostDuration_(data, colIdx));
  sections.push(['']);

  // Which Host Known
  sections.push(...buildWhichHost_(data, colIdx));
  sections.push(['']);

  // Closeness Scores
  sections.push(...buildClosenessScores_(data, colIdx));
  sections.push(['']);

  // Closeness by Host
  sections.push(...buildClosenessbyHost_(data, colIdx));

  writeSheet_('Host_Relationships', sections);
  formatGenericReport_('Host_Relationships');
}

function buildHostOverview_(data, colIdx) {
  const col = colIdx['Do you know the Host(s)?'];
  if (col === undefined) return [['OVERVIEW'], ['Column not found']];

  let total = data.length - 1, knowHosts = 0, unknownGuests = 0;

  for (let i = 1; i &lt; data.length; i++) {
    const value = String(data[i][col] || '').trim().toLowerCase();
    if (value.includes('yes') || value.includes('—')) knowHosts++;
    else if (value.includes('no')) unknownGuests++;
  }

  return [
    ['OVERVIEW'],
    ['Metric', 'Count', 'Percentage'],
    ['Total Guests', total, '100.0%'],
    ['Know Host(s)', knowHosts, `${((knowHosts / total) * 100).toFixed(1)}%`],
    ['Unknown Guests', unknownGuests, `${((unknownGuests / total) * 100).toFixed(1)}%`]
  ];
}

function buildHostDuration_(data, colIdx) {
  const col = colIdx['Do you know the Host(s)?'];
  if (col === undefined) return [['FRIENDSHIP DURATION'], ['Column not found']];

  const counts = {};
  let total = 0;

  for (let i = 1; i &lt; data.length; i++) {
    const value = String(data[i][col] || '').trim();
    if (!value) continue;
    counts[value] = (counts[value] || 0) + 1;
    total++;
  }

  const order = ['No', 'Yes — 3–12 months', 'Yes — 1–3 years', 'Yes — 3–5 years', 'Yes — 5–10 years', 'Yes — more than 10 years'];
  const sorted = Object.keys(counts).sort((a, b) =&gt; {
    const idxA = order.indexOf(a);
    const idxB = order.indexOf(b);
    if (idxA === -1 &amp;&amp; idxB === -1) return a.localeCompare(b);
    if (idxA === -1) return 1;
    if (idxB === -1) return -1;
    return idxA - idxB;
  });

  const rows = [['FRIENDSHIP DURATION DISTRIBUTION'], ['Duration', 'Count', 'Percentage']];

  sorted.forEach(duration =&gt; {
    const count = counts[duration];
    rows.push([duration, count, `${((count / total) * 100).toFixed(1)}%`]);
  });

  rows.push(['TOTAL', total, '100.0%']);
  return rows;
}

function buildWhichHost_(data, colIdx) {
  const col = colIdx['Which host have you known the longest?'];
  if (col === undefined) return [['WHICH HOST KNOWN LONGEST'], ['Column not found']];

  const counts = {};
  let total = 0;

  for (let i = 1; i &lt; data.length; i++) {
    const value = String(data[i][col] || '').trim();
    if (!value) continue;
    counts[value] = (counts[value] || 0) + 1;
    total++;
  }

  const sorted = Object.entries(counts).sort((a, b) =&gt; b[1] - a[1]);
  const rows = [['WHICH HOST KNOWN LONGEST'], ['Host', 'Count', 'Percentage']];

  sorted.forEach(([host, count]) =&gt; {
    rows.push([host, count, `${((count / total) * 100).toFixed(1)}%`]);
  });

  rows.push(['TOTAL', total, '100.0%']);
  return rows;
}

function buildClosenessScores_(data, colIdx) {
  const col = colIdx['If yes, how well do you know them?'];
  if (col === undefined) return [['CLOSENESS SCORE DISTRIBUTION'], ['Column not found']];

  const counts = {};
  let total = 0, sum = 0;

  for (let i = 1; i &lt; data.length; i++) {
    const value = data[i][col];
    if (value === null || value === undefined || value === '') continue;
    const score = Number(value);
    if (!isFinite(score)) continue;
   
    counts[score] = (counts[score] || 0) + 1;
    sum += score;
    total++;
  }

  const avg = total &gt; 0 ? (sum / total).toFixed(2) : 'N/A';
  const sorted = Object.keys(counts).sort((a, b) =&gt; Number(b) - Number(a));

  const rows = [
    ['CLOSENESS SCORE DISTRIBUTION (1=Acquaintance, 5=Close Friend)'],
    ['Score', 'Count', 'Percentage']
  ];

  sorted.forEach(score =&gt; {
    const count = counts[score];
    rows.push([score, count, `${((count / total) * 100).toFixed(1)}%`]);
  });

  rows.push(['TOTAL', total, '100.0%']);
  rows.push(['AVERAGE SCORE', avg, '']);
  return rows;
}

function buildClosenessbyHost_(data, colIdx) {
  const hostCol = colIdx['Which host have you known the longest?'];
  const scoreCol = colIdx['If yes, how well do you know them?'];
 
  if (hostCol === undefined || scoreCol === undefined) {
    return [['AVERAGE CLOSENESS BY HOST'], ['Required columns not found']];
  }

  const hostScores = {};

  for (let i = 1; i &lt; data.length; i++) {
    const host = String(data[i][hostCol] || '').trim();
    const score = data[i][scoreCol];
   
    if (!host || score === null || score === undefined || score === '') continue;
    const scoreNum = Number(score);
    if (!isFinite(scoreNum)) continue;

    if (!hostScores[host]) hostScores[host] = { sum: 0, count: 0 };
    hostScores[host].sum += scoreNum;
    hostScores[host].count++;
  }

  const rows = [['AVERAGE CLOSENESS BY HOST'], ['Host', 'Count', 'Average Score']];

  Object.entries(hostScores).forEach(([host, data]) =&gt; {
    const avg = (data.sum / data.count).toFixed(2);
    rows.push([host, data.count, avg]);
  });

  return rows;
}

// ============================================================================
// REPORT 4: ATTENDEE VS NO-SHOW ANALYSIS
// ============================================================================

/**
 * Compare guests who attended vs those who didn't
 * Output: Attendee_Analysis sheet
 */
function buildAttendeeAnalysis() {
  const ss = SpreadsheetApp.getActive();
  const cleanSheet = ss.getSheetByName(REPORTS_CLEAN_SHEET);
 
  if (!cleanSheet) {
    throw new Error(`Sheet &quot;${REPORTS_CLEAN_SHEET}&quot; not found.`);
  }

  const data = cleanSheet.getDataRange().getValues();
  if (data.length &lt; 2) {
    writeSheet_('Attendee_Analysis', [['No data available']]);
    return;
  }

  const header = data[0];
  const colIdx = getColumnMap_(header);

  const sections = [];

  sections.push(['ATTENDEE VS NO-SHOW ANALYSIS']);
  sections.push(['']);

  // Compare demographics
  const compareFields = [
    ['Age Range', 'AGE RANGE'],
    ['Self-Identified Gender', 'GENDER'],
    ['Education Level', 'EDUCATION'],
    ['Do you know the Host(s)?', 'HOST RELATIONSHIP']
  ];

  compareFields.forEach(([colName, label]) =&gt; {
    sections.push(...buildAttendeeComparison_(data, colIdx, colName, label));
    sections.push(['']);
  });

  writeSheet_('Attendee_Analysis', sections);
  formatGenericReport_('Attendee_Analysis');
}

function buildAttendeeComparison_(data, colIdx, colName, label) {
  const dataCol = colIdx[colName];
  const checkedInCol = colIdx['Checked-In at Event'];
 
  if (dataCol === undefined || checkedInCol === undefined) {
    return [[`${label} COMPARISON`], ['Required columns not found']];
  }

  const attendeeCounts = {};
  const noShowCounts = {};

  for (let i = 1; i &lt; data.length; i++) {
    const value = String(data[i][dataCol] || '').trim();
    const isAttendee = String(data[i][checkedInCol] || '').trim().toUpperCase() === 'Y';

    if (!value) continue;

    if (isAttendee) {
      attendeeCounts[value] = (attendeeCounts[value] || 0) + 1;
    } else {
      noShowCounts[value] = (noShowCounts[value] || 0) + 1;
    }
  }

  const allValues = new Set([...Object.keys(attendeeCounts), ...Object.keys(noShowCounts)]);
  const sorted = Array.from(allValues).sort();

  const attendeeTotal = Object.values(attendeeCounts).reduce((a, b) =&gt; a + b, 0);
  const noShowTotal = Object.values(noShowCounts).reduce((a, b) =&gt; a + b, 0);

  const rows = [
    [`${label} COMPARISON: ATTENDEES VS NO-SHOWS`],
    ['Category', 'Attendees', '% Attendees', 'No-Shows', '% No-Shows']
  ];

  sorted.forEach(value =&gt; {
    const attendeeCount = attendeeCounts[value] || 0;
    const noShowCount = noShowCounts[value] || 0;
    const attendeePct = attendeeTotal &gt; 0 ? ((attendeeCount / attendeeTotal) * 100).toFixed(1) : '0.0';
    const noShowPct = noShowTotal &gt; 0 ? ((noShowCount / noShowTotal) * 100).toFixed(1) : '0.0';

    rows.push([value, attendeeCount, `${attendeePct}%`, noShowCount, `${noShowPct}%`]);
  });

  rows.push(['TOTAL', attendeeTotal, '100.0%', noShowTotal, '100.0%']);
  return rows;
}

// ============================================================================
// REPORT 5: GUEST PROFILE CARDS
// ============================================================================

/**
 * Create individual profile card for each guest
 * Output: Guest_Profiles sheet
 */
function buildGuestProfiles() {
  const ss = SpreadsheetApp.getActive();
  const cleanSheet = ss.getSheetByName(REPORTS_CLEAN_SHEET);
  const simSheet = ss.getSheetByName('Guest_Similarity');
 
  if (!cleanSheet) {
    throw new Error(`Sheet &quot;${REPORTS_CLEAN_SHEET}&quot; not found.`);
  }

  const data = cleanSheet.getDataRange().getValues();
  if (data.length &lt; 2) {
    writeSheet_('Guest_Profiles', [['No data available']]);
    return;
  }

  const header = data[0];
  const colIdx = getColumnMap_(header);

  // Build profiles
  const profiles = [
    ['Screen Name', 'UID', 'Age', 'Gender', 'Orientation', 'Ethnicity', 'Education', 'Industry', 'Role',
     'Top 3 Interests', 'Music Genre', 'Favorite Artist', 'Personality Trait', 'Host Known Longest',
     'Closeness', 'Checked-In']
  ];

  for (let i = 1; i &lt; data.length; i++) {
    const row = data[i];
   
    // Parse interests
    const interestsStr = String(row[colIdx['Your General Interests (Choose 3)']] || '').trim();
    const interests = interestsStr.split(',').slice(0, 3).map(s =&gt; s.trim()).join(', ');

    profiles.push([
      row[colIdx['Screen Name']] || '',
      row[colIdx['UID']] || '',
      row[colIdx['Age Range']] || '',
      row[colIdx['Self-Identified Gender']] || '',
      row[colIdx['Self-Identified Sexual Orientation']] || '',
      row[colIdx['Self Identified Ethnicity']] || '',
      row[colIdx['Education Level']] || '',
      row[colIdx['Employment Information (Industry)']] || '',
      row[colIdx['Employment Information (Role)']] || '',
      interests,
      row[colIdx['Music Preference']] || '',
      row[colIdx['Current Favorite Artist']] || '',
      row[colIdx['At your worst you are…']] || '',
      row[colIdx['Which host have you known the longest?']] || '',
      row[colIdx['If yes, how well do you know them?']] || '',
      row[colIdx['Checked-In at Event']] || ''
    ]);
  }

  writeSheet_('Guest_Profiles', profiles);
 
  const sheet = ss.getSheetByName('Guest_Profiles');
  if (sheet) {
    sheet.getRange(1, 1, 1, profiles[0].length)
      .setFontWeight('bold')
      .setBackground('#4a86e8')
      .setFontColor('#ffffff');
    sheet.setFrozenRows(1);
    for (let col = 1; col &lt;= profiles[0].length; col++) {
      sheet.autoResizeColumn(col);
    }
  }
}

// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================

/**
 * Create column name to index mapping
 */
function getColumnMap_(header) {
  const map = {};
  header.forEach((col, idx) =&gt; {
    const colName = String(col || '').trim();
    if (colName) map[colName] = idx;
  });
  return map;
}

/**
 * Write data to a sheet
 */
function writeSheet_(sheetName, data) {
  const ss = SpreadsheetApp.getActive();
  let sheet = ss.getSheetByName(sheetName);
 
  if (!sheet) {
    sheet = ss.insertSheet(sheetName);
  }
 
  sheet.clear();

  if (!data || data.length === 0) {
    sheet.getRange(1, 1).setValue('No data to display');
    return;
  }

  // Find max columns
  const maxCols = Math.max(...data.map(row =&gt; Array.isArray(row) ? row.length : 1));

  // Pad rows to same length
  const paddedRows = data.map(row =&gt; {
    if (!Array.isArray(row)) return [row];
    const padded = [...row];
    while (padded.length &lt; maxCols) padded.push('');
    return padded;
  });

  sheet.getRange(1, 1, paddedRows.length, maxCols).setValues(paddedRows);
}

/**
 * Apply generic formatting to report sheets
 */
function formatGenericReport_(sheetName) {
  const sheet = SpreadsheetApp.getActive().getSheetByName(sheetName);
  if (!sheet) return;

  const data = sheet.getDataRange().getValues();
  const maxCols = data[0].length;

  for (let col = 1; col &lt;= maxCols; col++) {
    sheet.autoResizeColumn(col);
  }

  for (let row = 1; row &lt;= data.length; row++) {
    const cellValue = String(data[row - 1][0] || '').trim();
   
    // Main titles (ends with ANALYSIS)
    if (cellValue.includes('ANALYSIS')) {
      sheet.getRange(row, 1, 1, maxCols)
        .setFontWeight('bold')
        .setFontSize(14)
        .setBackground('#1c4587')
        .setFontColor('#ffffff');
    }
    // Section headers (all caps with keywords)
    else if (cellValue.toUpperCase() === cellValue &amp;&amp; cellValue.length &gt; 0 &amp;&amp;
             (cellValue.includes('DISTRIBUTION') || cellValue.includes('TOP ') ||
              cellValue.includes('BY ') || cellValue.includes('SUMMARY') ||
              cellValue.includes('COMPARISON') || cellValue.includes('OVERVIEW'))) {
      sheet.getRange(row, 1, 1, maxCols)
        .setFontWeight('bold')
        .setFontSize(11)
        .setBackground('#4a86e8')
        .setFontColor('#ffffff');
    }
    // Column headers
    else if (['Category', 'Metric', 'Genre', 'Rank', 'Interest', 'Host', 'Duration',
              'Score', 'Age Range', 'Gender'].includes(cellValue)) {
      sheet.getRange(row, 1, 1, maxCols)
        .setFontWeight('bold')
        .setBackground('#d9d9d9');
    }
    // Total rows
    else if (cellValue === 'TOTAL' || cellValue.includes('AVERAGE')) {
      sheet.getRange(row, 1, 1, maxCols)
        .setFontWeight('bold')
        .setBackground('#f3f3f3');
    }
  }
}


