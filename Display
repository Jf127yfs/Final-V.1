<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>PARTY SYSTEM // 5317 CHARLOTTE</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    :root {
      --bg: #000;
      --fg: #0f0;
      --accent: #ff0;
      --warn: #f00;
      --panel: #0a0a0a;
      --border: #0f0;
    }

    * { box-sizing: border-box; margin: 0; padding: 0; }

    body {
      background: var(--bg);
      color: var(--fg);
      font: 14px 'Courier New', monospace;
      overflow: hidden;
      height: 100vh;
      display: flex;
      flex-direction: column;
      position: relative;
    }

    /* Scanline effect */
    body::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: repeating-linear-gradient(
        0deg,
        rgba(0, 255, 0, 0.03) 0px,
        rgba(0, 0, 0, 0.05) 1px,
        rgba(0, 255, 0, 0.03) 2px
      );
      pointer-events: none;
      z-index: 9999;
      animation: scanline 8s linear infinite;
    }

    @keyframes scanline {
      0% { transform: translateY(0); }
      100% { transform: translateY(10px); }
    }

    /* CRT flicker */
    @keyframes flicker {
      0% { opacity: 0.97; }
      5% { opacity: 1; }
      10% { opacity: 0.97; }
      100% { opacity: 0.97; }
    }

    body {
      animation: flicker 0.15s infinite;
    }

    /* Iframe container */
    .carousel-container {
      flex: 1;
      position: relative;
      width: 100%;
      height: 100%;
      overflow: hidden;
    }

    .carousel-frame {
      width: 100%;
      height: 100%;
      border: none;
      display: block;
    }

    /* Menu button in corner */
    .menu-button {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 10001;
      background: var(--panel);
      border: 2px solid var(--border);
      color: var(--fg);
      padding: 8px 16px;
      cursor: pointer;
      font: 14px 'Courier New', monospace;
      letter-spacing: 3px;
      box-shadow: 0 0 15px rgba(0, 255, 0, 0.5);
      transition: all 0.3s ease;
    }

    .menu-button:hover {
      background: var(--fg);
      color: var(--bg);
      box-shadow: 0 0 25px rgba(0, 255, 0, 0.8);
    }

    .menu-button:active {
      transform: scale(0.95);
    }

    /* Settings panel */
    .settings-panel {
      position: fixed;
      top: 0;
      right: -400px;
      width: 400px;
      height: 100%;
      background: var(--panel);
      border-left: 2px solid var(--border);
      z-index: 10000;
      transition: right 0.4s ease;
      overflow-y: auto;
      box-shadow: -5px 0 30px rgba(0, 255, 0, 0.3);
    }

    .settings-panel.active {
      right: 0;
    }

    .settings-header {
      padding: 20px;
      border-bottom: 2px solid var(--border);
      background: var(--bg);
    }

    .settings-header h2 {
      font-size: 18px;
      letter-spacing: 4px;
      color: var(--fg);
      text-shadow: 0 0 10px var(--fg);
      margin-bottom: 5px;
    }

    .settings-header p {
      font-size: 10px;
      color: var(--accent);
      letter-spacing: 2px;
    }

    .settings-content {
      padding: 20px;
    }

    .settings-section {
      margin-bottom: 25px;
      padding-bottom: 25px;
      border-bottom: 1px solid var(--border);
    }

    .settings-section:last-child {
      border-bottom: none;
    }

    .settings-section h3 {
      font-size: 14px;
      letter-spacing: 2px;
      color: var(--fg);
      margin-bottom: 15px;
      text-shadow: 0 0 5px var(--fg);
    }

    .settings-input-group {
      margin-bottom: 15px;
    }

    .settings-input-group label {
      display: block;
      font-size: 11px;
      color: var(--accent);
      margin-bottom: 8px;
      letter-spacing: 1px;
    }

    .settings-input-group input[type="number"] {
      width: 100%;
      background: var(--bg);
      border: 2px solid var(--border);
      color: var(--fg);
      padding: 10px;
      font: 12px 'Courier New', monospace;
      outline: none;
    }

    .settings-input-group input[type="number"]:focus {
      border-color: var(--accent);
      box-shadow: 0 0 10px rgba(255, 255, 0, 0.3);
    }

    .settings-button {
      width: 100%;
      background: var(--bg);
      border: 2px solid var(--border);
      color: var(--fg);
      padding: 12px;
      font: 12px 'Courier New', monospace;
      letter-spacing: 2px;
      cursor: pointer;
      margin-bottom: 10px;
      transition: all 0.3s ease;
      text-transform: uppercase;
    }

    .settings-button:hover {
      background: var(--fg);
      color: var(--bg);
      box-shadow: 0 0 15px rgba(0, 255, 0, 0.5);
    }

    .settings-button:active {
      transform: scale(0.98);
    }

    .settings-button.active {
      background: var(--accent);
      color: var(--bg);
      border-color: var(--accent);
    }

    .settings-button.danger {
      border-color: var(--warn);
      color: var(--warn);
    }

    .settings-button.danger:hover {
      background: var(--warn);
      color: var(--bg);
    }

    /* Control buttons */
    .control-row {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr;
      gap: 10px;
      margin-bottom: 10px;
    }

    .control-button {
      background: var(--bg);
      border: 2px solid var(--border);
      color: var(--fg);
      padding: 10px;
      font: 11px 'Courier New', monospace;
      letter-spacing: 1px;
      cursor: pointer;
      transition: all 0.3s ease;
      text-transform: uppercase;
    }

    .control-button:hover {
      background: var(--fg);
      color: var(--bg);
      box-shadow: 0 0 10px rgba(0, 255, 0, 0.4);
    }

    .control-button:active {
      transform: scale(0.95);
    }

    .control-button.active {
      background: var(--accent);
      color: var(--bg);
      border-color: var(--accent);
    }

    /* Status display */
    .status-display {
      background: var(--bg);
      border: 2px solid var(--border);
      padding: 15px;
      margin-bottom: 15px;
      font-size: 11px;
      line-height: 1.8;
    }

    .status-display .status-label {
      color: var(--accent);
      letter-spacing: 1px;
    }

    .status-display .status-value {
      color: var(--fg);
      margin-left: 5px;
    }

    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--bg);
      z-index: 9998;
      display: none;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .loading-overlay.active {
      display: flex;
      opacity: 0.95;
    }

    .loading-text {
      font-size: 20px;
      color: var(--fg);
      letter-spacing: 4px;
      text-shadow: 0 0 20px var(--fg);
      margin-bottom: 20px;
    }

    .loading-spinner {
      font-size: 16px;
      color: var(--accent);
      letter-spacing: 2px;
    }

    .loading-spinner::after {
      content: "...";
      animation: dots 1.5s infinite;
    }

    @keyframes dots {
      0%, 20% { content: "."; }
      40% { content: ".."; }
      60%, 100% { content: "..."; }
    }

    .loading-details {
      margin-top: 15px;
      font-size: 12px;
      color: var(--accent);
      letter-spacing: 1px;
    }

    /* Page list */
    .page-list {
      list-style: none;
      padding: 0;
    }

    .page-list li {
      padding: 8px 12px;
      border: 1px solid var(--border);
      margin-bottom: 5px;
      font-size: 11px;
      letter-spacing: 1px;
      background: var(--bg);
    }

    .page-list li.current {
      background: var(--fg);
      color: var(--bg);
      border-color: var(--fg);
      font-weight: bold;
    }

    .page-list li::before {
      content: "> ";
      color: var(--accent);
      margin-right: 5px;
    }

    .page-list li.current::before {
      color: var(--bg);
    }
  </style>
</head>
<body>
  <!-- Carousel iframe container -->
  <div class="carousel-container">
    <iframe id="carouselFrame" class="carousel-frame" src=""></iframe>
  </div>

  <!-- Menu button -->
  <button class="menu-button" onclick="toggleSettings()">...</button>

  <!-- Settings panel -->
  <div class="settings-panel" id="settingsPanel">
    <div class="settings-header">
      <h2>CAROUSEL CONTROL</h2>
      <p>CONFIGURE DISPLAY ROTATION</p>
    </div>

    <div class="settings-content">
      <!-- Status Section -->
      <div class="settings-section">
        <h3>STATUS</h3>
        <div class="status-display">
          <div><span class="status-label">MODE:</span><span class="status-value" id="statusMode">STOPPED</span></div>
          <div><span class="status-label">CURRENT:</span><span class="status-value" id="statusCurrent">-</span></div>
          <div><span class="status-label">NEXT IN:</span><span class="status-value" id="statusNext">-</span></div>
          <div><span class="status-label">INTERVAL:</span><span class="status-value" id="statusInterval">-</span></div>
        </div>
      </div>

      <!-- Timing Configuration -->
      <div class="settings-section">
        <h3>TIMING CONFIG</h3>
        <div class="settings-input-group">
          <label>DISPLAY DURATION (SECONDS)</label>
          <input type="number" id="intervalInput" min="5" max="600" value="30" step="5">
        </div>
        <button class="settings-button" onclick="updateInterval()">APPLY INTERVAL</button>
      </div>

      <!-- Carousel Controls -->
      <div class="settings-section">
        <h3>CAROUSEL CONTROLS</h3>
        <button class="settings-button active" id="startButton" onclick="startCarousel()">START CAROUSEL</button>
        <button class="settings-button danger" id="stopButton" onclick="stopCarousel()">STOP CAROUSEL</button>

        <div style="margin-top: 15px;">
          <div class="control-row">
            <button class="control-button" onclick="previousPage()">â—„ PREV</button>
            <button class="control-button" id="pauseButton" onclick="togglePause()">PAUSE</button>
            <button class="control-button" onclick="nextPage()">NEXT â–º</button>
          </div>
        </div>
      </div>

      <!-- Page Rotation -->
      <div class="settings-section">
        <h3>ROTATION ORDER</h3>
        <ul class="page-list" id="pageList">
          <li>INTRO</li>
          <li>MD - MAP DISPLAY</li>
          <li>WALL</li>
          <li>MM - MATCHMAKER</li>
        </ul>
      </div>

      <!-- Quick Actions -->
      <div class="settings-section">
        <h3>QUICK ACTIONS</h3>
        <button class="settings-button" onclick="loadPage('intro')">LOAD INTRO</button>
        <button class="settings-button" onclick="loadPage('md')">LOAD MD</button>
        <button class="settings-button" onclick="loadPage('wall')">LOAD WALL</button>
        <button class="settings-button" onclick="loadPage('mm')">LOAD MM</button>
      </div>
    </div>
  </div>

  <!-- Loading overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-text">LOADING MODULE</div>
    <div class="loading-spinner"></div>
    <div class="loading-details" id="loadingDetails">INITIALIZING</div>
  </div>

  <script>
    // Carousel configuration
    const PAGES = ['intro', 'md', 'wall', 'mm'];
    const PAGE_NAMES = {
      'intro': 'INTRO',
      'md': 'MD - MAP DISPLAY',
      'wall': 'WALL',
      'mm': 'MM - MATCHMAKER'
    };

    let currentIndex = 0;
    let carouselInterval = null;
    let intervalDuration = 30; // seconds
    let isPaused = false;
    let countdown = 0;
    let countdownInterval = null;

    // Get base URL for navigation
    function getBaseUrl() {
      const url = window.location.href.split('?')[0];
      return url;
    }

    // Load a specific page
    function loadPage(page) {
      showLoading('LOADING ' + PAGE_NAMES[page]);

      setTimeout(function() {
        const iframe = document.getElementById('carouselFrame');
        iframe.src = getBaseUrl() + '?page=' + page;

        // Update current page in list
        updatePageList(page);

        // Update status
        document.getElementById('statusCurrent').textContent = PAGE_NAMES[page];

        hideLoading();
      }, 800);
    }

    // Update page list highlighting
    function updatePageList(currentPage) {
      const pageList = document.getElementById('pageList');
      const items = pageList.getElementsByTagName('li');

      for (let i = 0; i < items.length; i++) {
        items[i].classList.remove('current');
        if (PAGES[i] === currentPage) {
          items[i].classList.add('current');
        }
      }
    }

    // Show loading overlay
    function showLoading(message) {
      const overlay = document.getElementById('loadingOverlay');
      const details = document.getElementById('loadingDetails');
      details.textContent = message;
      overlay.classList.add('active');
    }

    // Hide loading overlay
    function hideLoading() {
      const overlay = document.getElementById('loadingOverlay');
      setTimeout(function() {
        overlay.classList.remove('active');
      }, 500);
    }

    // Start carousel
    function startCarousel() {
      if (carouselInterval) {
        return; // Already running
      }

      isPaused = false;
      document.getElementById('pauseButton').textContent = 'PAUSE';
      document.getElementById('pauseButton').classList.remove('active');
      document.getElementById('statusMode').textContent = 'RUNNING';

      // Load first page immediately
      loadPage(PAGES[currentIndex]);

      // Start countdown
      countdown = intervalDuration;
      updateCountdown();

      countdownInterval = setInterval(updateCountdown, 1000);

      // Start carousel rotation
      carouselInterval = setInterval(nextPage, intervalDuration * 1000);
    }

    // Stop carousel
    function stopCarousel() {
      if (carouselInterval) {
        clearInterval(carouselInterval);
        carouselInterval = null;
      }

      if (countdownInterval) {
        clearInterval(countdownInterval);
        countdownInterval = null;
      }

      isPaused = false;
      document.getElementById('pauseButton').textContent = 'PAUSE';
      document.getElementById('pauseButton').classList.remove('active');
      document.getElementById('statusMode').textContent = 'STOPPED';
      document.getElementById('statusNext').textContent = '-';
    }

    // Toggle pause
    function togglePause() {
      if (!carouselInterval) {
        return; // Not running
      }

      isPaused = !isPaused;
      const button = document.getElementById('pauseButton');

      if (isPaused) {
        button.textContent = 'RESUME';
        button.classList.add('active');
        document.getElementById('statusMode').textContent = 'PAUSED';

        if (countdownInterval) {
          clearInterval(countdownInterval);
          countdownInterval = null;
        }
      } else {
        button.textContent = 'PAUSE';
        button.classList.remove('active');
        document.getElementById('statusMode').textContent = 'RUNNING';

        countdownInterval = setInterval(updateCountdown, 1000);
      }
    }

    // Update countdown display
    function updateCountdown() {
      if (isPaused) {
        return;
      }

      countdown--;

      if (countdown <= 0) {
        countdown = intervalDuration;
      }

      const mins = Math.floor(countdown / 60);
      const secs = countdown % 60;
      const timeStr = mins + ':' + (secs < 10 ? '0' : '') + secs;

      document.getElementById('statusNext').textContent = timeStr;
    }

    // Next page
    function nextPage() {
      if (isPaused) {
        return;
      }

      currentIndex = (currentIndex + 1) % PAGES.length;
      loadPage(PAGES[currentIndex]);
      countdown = intervalDuration;
    }

    // Previous page
    function previousPage() {
      if (carouselInterval && !isPaused) {
        // Reset timer
        countdown = intervalDuration;
      }

      currentIndex = (currentIndex - 1 + PAGES.length) % PAGES.length;
      loadPage(PAGES[currentIndex]);
    }

    // Update interval
    function updateInterval() {
      const input = document.getElementById('intervalInput');
      const newInterval = parseInt(input.value);

      if (newInterval < 5) {
        alert('Minimum interval is 5 seconds');
        input.value = 5;
        return;
      }

      if (newInterval > 600) {
        alert('Maximum interval is 600 seconds (10 minutes)');
        input.value = 600;
        return;
      }

      intervalDuration = newInterval;
      countdown = intervalDuration;
      document.getElementById('statusInterval').textContent = intervalDuration + 's';

      // Restart carousel if running
      if (carouselInterval) {
        stopCarousel();
        startCarousel();
      }

      // Save to localStorage
      localStorage.setItem('carouselInterval', intervalDuration);
    }

    // Toggle settings panel
    function toggleSettings() {
      const panel = document.getElementById('settingsPanel');
      panel.classList.toggle('active');
    }

    // Initialize
    function init() {
      // Load saved interval
      const savedInterval = localStorage.getItem('carouselInterval');
      if (savedInterval) {
        intervalDuration = parseInt(savedInterval);
        document.getElementById('intervalInput').value = intervalDuration;
      }

      document.getElementById('statusInterval').textContent = intervalDuration + 's';

      // Load first page
      loadPage(PAGES[0]);
    }

    // Run on load
    window.addEventListener('load', init);

    // Console easter egg
    console.log('%c5317 CHARLOTTE CAROUSEL SYSTEM', 'color: #0f0; font-size: 20px; font-family: monospace; text-shadow: 0 0 10px #0f0;');
    console.log('%cPages: intro â†’ MD â†’ wall â†’ MM', 'color: #ff0; font-family: monospace;');
  </script>
</body>
</html>
